openapi: 3.0.3
info:
  title: · TFM · SWAGGER - YML - OpenAPI 3.0
  description: YML - BACKEND1 - user/vehicle
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
tags:
  - name: user
    description: Operations about user
  - name: vehicle
    description: Operations about vehicle
paths:
  /security/authenticate:
    post:
      tags:
        - user
      summary: Generate Token
      description: This can only be done by the logged in user.
      operationId: authenticateUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthentication'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'

  /users:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by ID
      description: ''
      operationId: getUserById
      parameters:
        - in: path
          name: id
          description: 'The id that needs to be fetched. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      tags:
        - user
      summary: Delete user by id
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
  /vehicles:
    get:
      tags:
        - vehicle
      summary: Find vehicle by dniPropietario
      description: returns vehicles by dniPropietario
      operationId: getVehicleByDni
      parameters:
        - name: dniPropietario
          in: query
          description: dniPropietario of vehicles that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Invalid dniPropietario supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Vehicle not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      tags:
        - vehicle
      summary: crea un nuevo vehiculo
      description: vehicles
      operationId: createVehicle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        dni:
          type: string
          example: 11111111A
        name:
          type: string
          example: trabajo
        surName:
          type: string
          example: final master
        address:
          type: string
          example: C/estomismo 11 9b
        iban:
          type: string
          example: ES25 5555 9666 5566 5566 5566
        email:
          type: string
          example: pruebas@yahoo.es
        password:
          type: string
          example: 12345Aa$
        phone:
          type: string
          example: 666 66 66 66
        birthday:
          type: string
          format: Date <'m-d-Y'>
        ciudad:
          type: string
        pais:
          type: string
        roles:
          type: array
          items:
            type: integer
      required:
        - dni
        - name
        - surname
        - iban
        - email
        - birthday
        - address
        - password
        - phone
    Vehicle:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        dniPropietario:
          type: string
          description: dni propietario del vehiculo != al dni tomadorseguro
        marca:
          type: string
          description: marca del vehiculo
          example: hyundai , bmw , ford...
        modelo:
          type: string
          description: modelo del coche
          example: Santafe , x5 , mustang...
        fechaMatriculacion:
          type: string
          format: Date <'Y-m-d'>
          example: 2023-1-1
        matricula:
          type: string
      required:
        - marca
        - modelo
        - fechaMatriculacion
        - matricula

    UserAuthentication:
      type: object
      properties:
        usuario:
          type: string
        password:
          type: string


    TokenInfo:
      type: object
      properties:
        jwtToken:
          type: string


    ErrorMessage:
      type: object
      properties:
        statusCode:
          type: integer
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        description:
          type: string